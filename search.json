[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RobotZero A Comprehensive Environment for Line-Following Robot Development",
    "section": "",
    "text": "0.1 The Platform: Arduino Nano (@ArduinoNano)\nFor this project, we chose the Arduino Nano (@ArduinoNano) as our main controller specifically for its constrained environment. When we can achieve efficiency and speed within such limitations, we learn how to optimize ideas, algorithms, and programs - skills that are valuable across all computing platforms. The Arduino Nano (@ArduinoNano), based on the ATmega328P microcontroller, offers a small form factor (45 x 18 mm), ideal for compact robot designs. It includes 32KB of Flash memory, suitable for our advanced logging system, 2KB of SRAM for runtime operations, and runs at 16MHz, providing adequate processing power. The board features multiple analog inputs for our sensor array, PWM outputs for precise motor control, and maintains low power consumption while being cost-effective for both prototyping and final implementation.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#project-overview",
    "href": "index.html#project-overview",
    "title": "RobotZero A Comprehensive Environment for Line-Following Robot Development",
    "section": "0.2 Project Overview",
    "text": "0.2 Project Overview\nIn most projects, adjusting a line following robot for speed and efficiency becomes a tedious and time-consuming trial-and-error routine. Our project addresses this challenge by incorporating an advanced logging and analysis system that transforms the tuning process into a data-driven approach. The robot includes high-precision line detection using a 6-sensor array, PID-based motion control for smooth operation, and dual operating modes for analysis and high-speed performance. The comprehensive data logging system enables real-time performance monitoring, with flash-based storage for post-run analysis and a USB interface for data retrieval and analysis, providing the tools necessary for systematic testing and configuration.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#why-c",
    "href": "index.html#why-c",
    "title": "RobotZero A Comprehensive Environment for Line-Following Robot Development",
    "section": "0.3 Why C++?",
    "text": "0.3 Why C++?\nThe choice of C++ as our programming language was deliberate and based on several key factors. C++ allows us to organize our code into logical classes and modules, making the system more maintainable and easier to understand. This is particularly important for complex systems like our logging mechanism. The language provides low-level hardware access while supporting high-level abstractions, crucial for real-time operations where microseconds matter, such as sensor reading and motor control.\nWith limited resources on the Arduino Nano (@ArduinoNano), C++’s efficient memory management and minimal runtime overhead are essential. We can precisely control memory allocation and ensure optimal use of the available RAM. The language’s support for namespaces, classes, and templates helps maintain clean code architecture despite the system’s complexity. C++’s strong type system helps catch errors at compile-time rather than runtime, which is crucial for a system that needs to operate autonomously. Additionally, C++ allows us to create clean abstractions over hardware components while maintaining direct access when needed, making the code both maintainable and efficient. The object-oriented features facilitate code reuse and modular design, making it easier to extend or modify the robot’s functionality.\nThe combination of Arduino Nano (@ArduinoNano)’s capabilities with C++’s features allows us to create a  line following robot that not only performs its primary function but also provides valuable insights into its operation through advanced logging and analysis capabilities.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "oper.html",
    "href": "oper.html",
    "title": "2  Operation",
    "section": "",
    "text": "3 Line Following Robot Operation\nThe robot’s operation is divided into two distinct configuration levels: build-time configuration through software compilation and runtime operation of RoboZero.\nAt build time, critical parameters are set through compilation flags and constants. The DEBUG_LEVEL flag determines the robot’s operational mode: normal operation (0), analysis mode (1), or speed mode (2). Each mode compiles with different features and behaviors. Other build-time configurations include PID default constants, sensor weights, speed profiles, and timing parameters. These decisions fundamentally shape the robot’s behavior and available features.\nDuring runtime operation, the robot’s functioning begins with a calibration phase, essential for adapting to varying lighting conditions and surface characteristics. Upon powering up, the robot waits for the first button press, which initiates the calibration sequence. During calibration, the robot samples each of its six line sensors multiple times, establishing minimum and maximum values for each sensor. These values create a baseline for converting raw sensor readings into meaningful position data.\nAfter calibration, the robot waits for a second button press to begin its line following operation. The six-sensor array continuously reads the line position, with the outer sensors serving as markers for extreme deviations and the inner sensors providing precise positioning data. Each sensor reading is normalized using the calibration data and weighted based on its position in the array. The weighted average of these readings determines the robot’s position relative to the line.\nThe control system operates on a continuous loop, processing sensor data and adjusting motor outputs. A PID (Proportional-Integral-Derivative) controller calculates the necessary corrections based on the line position error - the difference between the current position and the desired center position. The proportional component provides immediate response to position errors, while the derivative component helps predict and dampen oscillations, resulting in smooth motion.\nSpeed control is managed dynamically based on the current situation. In straight sections, the robot can maintain higher speeds, while curves require speed adjustment for stability. The system includes a boost mechanism that temporarily increases speed when exiting curves to optimize lap times. The operating mode, determined at build time, affects the available speed ranges and control parameters.\nCourse markers on the track trigger specific behaviors. The robot can detect intersections, lap markers, and mode-change markers using dedicated marker sensors. When passing over these markers, the robot adjusts its operation accordingly - counting laps, changing speeds, or preparing to stop. The system is designed to complete a configurable number of laps before automatically stopping.\nIf compiled with debugging enabled (DEBUG_LEVEL &gt; 0), the logging system operates continuously during the robot’s operation. In analysis mode, it captures detailed performance data including line position, error values, motor speeds, and PID corrections. This data is temporarily stored in circular buffers and written to flash memory when safe conditions are met - typically during straight sections where precise control is less critical. The system also records significant events such as marker detections, mode changes, and lap completions.\nWhen the programmed number of laps is completed, the robot enters its stopping sequence. It gradually reduces speed to ensure controlled deceleration and precise stopping. After stopping, if debugging is enabled, the collected performance data remains stored in flash memory, ready for retrieval and analysis.\nData retrieval, available only in debug builds, occurs through a USB interface when the robot is stationary. Upon receiving the appropriate command through the serial interface, the robot transmits its stored data in a structured format, including session headers, performance records, event logs, and lap statistics. This data can then be analyzed to optimize the robot’s parameters such as PID constants, speed profiles, and acceleration rates.\nThe entire system prioritizes real-time performance while ensuring data collection doesn’t interfere with the robot’s primary line-following function. Error checking and recovery mechanisms are implemented throughout the system, from sensor reading validation to data storage verification, ensuring reliable operation even under challenging conditions.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#initial-setup",
    "href": "oper.html#initial-setup",
    "title": "2  Operation",
    "section": "4.1 Initial Setup",
    "text": "4.1 Initial Setup\n\nPlace the robot near the course\nPower on the robot\nWait for initial setup delay (600ms)\n\nStatus LED will be on during this period\nMotors will be inactive\n\nAfter delay, LED turns off and robot is ready for calibration",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#calibration-process",
    "href": "oper.html#calibration-process",
    "title": "2  Operation",
    "section": "4.2 Calibration Process",
    "text": "4.2 Calibration Process\n\nPress the start button for first calibration phase\n\nLED will turn on\n\nThe calibration process:\n\nTakes 400 samples from each sensor\n30ms delay between samples (total ~12 seconds)\nEstablishes minimum and maximum values for each sensor\n\nAfter calibration completes:\n\nLED turns off\nRobot waits for second button press",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#operation-start",
    "href": "oper.html#operation-start",
    "title": "2  Operation",
    "section": "4.3 Operation Start",
    "text": "4.3 Operation Start\n\nPlace robot on the track\nPress start button again to begin operation\n\nLED turns on\nRobot starts line following operation\n\nInitial operating parameters:\n\nSpeed mode begins at BASE_FAST (115)\nPID control active with default parameters\nNormal operating mode engaged",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#during-operation",
    "href": "oper.html#during-operation",
    "title": "2  Operation",
    "section": "4.4 During Operation",
    "text": "4.4 During Operation\nThe robot recognizes three marker patterns: 1. Finish line marker (both sensors) - Updates lap count - Triggers stop sequence on second detection 2. Speed mode marker (left sensor only) - Toggles between normal and precision mode - In precision mode: SPEED_SLOW - In normal mode: BASE_FAST 3. Intersection marker (both sensors) - Logged but no special action taken",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#stop-sequence",
    "href": "oper.html#stop-sequence",
    "title": "2  Operation",
    "section": "4.5 Stop Sequence",
    "text": "4.5 Stop Sequence\nThe robot will stop automatically when: 1. Second finish line is detected 2. Stop sequence activates: - Speed reduces to SPEED_BRAKE - After 50ms deceleration - Final stop after 300ms - Motors power off",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#data-retrieval-debug-mode-only",
    "href": "oper.html#data-retrieval-debug-mode-only",
    "title": "2  Operation",
    "section": "4.6 Data Retrieval (Debug Mode Only)",
    "text": "4.6 Data Retrieval (Debug Mode Only)\nIf DEBUG_LEVEL &gt; 0: 1. When robot stops, flash memory is marked as ready 2. LED displays transmission pattern: - Alternates between slow blink (1000ms) and fast blink (300ms) - Pattern switches every 3000ms 3. Data can be retrieved through serial interface 4. After successful transmission: - Log ready flag is cleared - LED pattern stops",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#error-recovery",
    "href": "oper.html#error-recovery",
    "title": "2  Operation",
    "section": "4.7 Error Recovery",
    "text": "4.7 Error Recovery\nIf line is lost: 1. Robot uses last valid position 2. Position is forced to extreme (-100 or 100) based on last direction 3. PID controller attempts to recover 4. Robot continues operation if line is found",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  },
  {
    "objectID": "oper.html#operating-modes",
    "href": "oper.html#operating-modes",
    "title": "2  Operation",
    "section": "4.8 Operating Modes",
    "text": "4.8 Operating Modes\nTwo base operating speeds: 1. Normal Mode (BASE_FAST): - Base speed of 115 - Curve speed reduction active - Boost after curves (if not in precision mode)\n\nPrecision Mode:\n\nActivated by left marker\nUses SPEED_SLOW\nDisables boost feature\nMore conservative operation\n\n\nDebug Operating Modes (if DEBUG_LEVEL &gt; 0): 1. Analysis Mode (DEBUG_LEVEL = 1): - 5 laps - Conservative speeds - Full data logging\n\nSpeed Mode (DEBUG_LEVEL = 2):\n\n3 laps\nMaximum performance\nFull data logging",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Operation</span>"
    ]
  }
]